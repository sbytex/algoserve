#!/usr/bin/env bash

# Exit immediately if a command exits with a non-zero status.
set -e
# Treat unset variables as an error.
set -u
# The return value of a pipeline is the status of the last command to exit with a non-zero status,
# or zero if all commands exit successfully.
set -o pipefail

# Function to log messages with a timestamp
log() {
    echo "[INFO] $(date +'%Y-%m-%d %H:%M:%S') - $1"
}

# Function to execute a command and check its success
execute() {
    log "Executing: $*"
    if ! "$@"; then
        log "ERROR: Command failed: $*"
        exit 1 # Exit the script on command failure
    fi
}

# Function to get the question title from qInfo.md
get_question_title() {
    if [[ -f "qInfo.md" ]]; then
        # Use awk to find the first line starting with '# ' and remove '# '
        # Also remove carriage return for cross-platform compatibility
        awk '/^# /{print substr($0, 3); exit}' qInfo.md | tr -d '\r'
    else
        echo "Untitled"
    fi
}

# --- Main Script Logic ---

# Check if qInfo.md exists before proceeding with appending
if [[ ! -f "qInfo.md" ]]; then
    log "Error: qInfo.md not found. Cannot proceed."
    exit 1
fi

# Variable to track if parc.js was processed, for later cleanup
PARC_JS_PROCESSED=0

# Append solution from parc.js to qInfo.md if it exists
if [[ -f "parc.js" ]]; then
    log "Appending solution from parc.js to qInfo.md"
    # Use a temporary file for safe appending
    TEMP_QINFO=$(mktemp)
    execute cp "qInfo.md" "$TEMP_QINFO" # Copy original content
    echo -e "\n\`\`\`javascript" >> "$TEMP_QINFO" # Add markdown code block
    execute cat parc.js >> "$TEMP_QINFO"
    echo -e "\n\`\`\`" >> "$TEMP_QINFO" # Close markdown code block
    execute mv "$TEMP_QINFO" "qInfo.md" # Replace original with updated temp file
    PARC_JS_PROCESSED=1
else
    log "Warning: parc.js not found. Skipping solution append."
fi

# Get the question title and rename qInfo.md
QUESTION_TITLE=$(get_question_title)
if [[ "$QUESTION_TITLE" != "Untitled" ]]; then
    # Sanitize the title for filename (replace spaces with hyphens, remove special chars)
    # This sed command removes non-alphanumeric characters except spaces, then replaces spaces with hyphens.
    SANITIZED_TITLE=$(echo "$QUESTION_TITLE" | sed 's/[^a-zA-Z0-9 ]//g' | sed 's/ /-/g')
    NEW_FILENAME="${SANITIZED_TITLE}.md"
    FINAL_PATH="chest/$NEW_FILENAME" # Define the final path inside the 'chest' directory

    # Create 'chest' directory if it doesn't exist
    if [[ ! -d "chest" ]]; then
        log "Creating directory: chest"
        execute mkdir -p "chest"
    fi

    # Check if the new filename is the same as the old one (should ideally not happen with valid titles)
    # or if the target file already exists in the 'chest' directory.
    if [[ "qInfo.md" == "$NEW_FILENAME" ]]; then
        log "Filename would not change (qInfo.md -> qInfo.md). Skipping rename and move."
    elif [[ -f "$FINAL_PATH" ]]; then
        log "Warning: Target file '$FINAL_PATH' already exists. Skipping rename and move to avoid overwrite."
    else
        # Rename qInfo.md
        execute mv "qInfo.md" "$NEW_FILENAME"
        log "Renamed qInfo.md to $NEW_FILENAME"

        # Move the renamed file into the 'chest' directory
        execute mv "$NEW_FILENAME" "$FINAL_PATH"
        log "Moved $NEW_FILENAME to $FINAL_PATH"

        # # Git commands
        # log "Adding to Git and pushing..."
        # execute git add "$FINAL_PATH" # Add the file at its new, final location
        # Check if there are actual changes to commit before committing
        # if git diff --cached --exit-code --quiet; then
        #     log "No changes to commit for '$FINAL_PATH'."
        # else
        #     execute git commit -m "Add LeetCode solution: $QUESTION_TITLE"
        #     execute git push origin main # Or your default branch (e.g., 'master')
        # fi
    fi
else
    log "Could not get question title. qInfo.md remains as is and will not be moved or committed."
fi

# --- Cleanup ---
# Remove parc.js if it was initially found and processed.
if [[ "$PARC_JS_PROCESSED" -eq 1 ]]; then
    if [[ -f "parc.js" ]]; then # Double check before removing
        log "Removing parc.js"
        execute rm "parc.js"
    fi
fi

# qInfo.md does not need to be explicitly removed with `rm qInfo.md`.
# If the script successfully processed it (found a title, renamed, and moved),
# then the original `qInfo.md` file no longer exists (it was moved/renamed).
# If the script could NOT process it (e.g., "Untitled" title, or target existed),
# then `qInfo.md` is left as is, indicating it's still unprocessed.

log "Script finished."

